[{"name": "app.py", "content": "#\n# Heatmapper\n# Geocoordinate\n#\n# This file contains the ShinyLive application for Geocoordinate Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n# Last Modified: 2024/02/07\n#\n\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom folium import Map as FoliumMap\nfrom folium.plugins import HeatMap\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom pathlib import Path\nfrom io import BytesIO\nfrom sys import modules\n\n\n# Interoperability between ShinyLive and PyShiny\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tSource = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/geocoordinate/example_input/\"\n\tasync def download(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\nelse:\n\tfrom os.path import exists\n\tSource = \"../example_input/\"\n\tasync def download(url): return open(url, \"rb\").read() if exists(url) else None\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\tCache = {}\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset shows deaths from a cholera outbreak in 1854. John Snow used this data in conjunction with local pump locations as evidence that cholera is spread by contaminated water. A digitised version of the data is available online, courtesy of Robin Wilson (robin@rtwilson.com).\",\n\t\t\"example2.txt\": \"This example data set shows bike thefts in Vancouver in 2011. The data was obtained from a 2013 Vancouver Sun blog post by Chad Skelton.\",\n\t\t\"example3.txt\": \"This example data set shows the location of traffic signals in Toronto. The data was obtained from Toronto Open Data. The idea to use this data set comes from this R-bloggers post by Myles Harrison.\"\n\t}\n\n\n\tasync def LoadData():\n\t\t\"\"\"\n\t\t@brief Returns the DataFrame representation of the data to place on the map\n\t\t@returns The DataFrame\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn DataFrame()\n\t\t\tn = file[0][\"name\"]\n\t\t\tf = file[0][\"datapath\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tf = Cache[n] if n in Cache else BytesIO(await download(Source + input.Example()))\n\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": return read_csv(f)\n\t\t\tcase \".xlsx\": return read_excel(f)\n\t\t\tcase _: return read_table(f)\n\n\n\tasync def LoadMap():\n\t\t\"\"\"\n\t\t@brief Generates a map with the provided information\n\t\t@returns the Folium.Map\n\t\t\"\"\"\n\n\t\tdf = await LoadData()\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty: return FoliumMap((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\t\t# Get the long and lat.\n\t\tlongitudes = df[\"Longitude\"].tolist()\n\t\tlatitudes = df[\"Latitude\"].tolist()\n\n\t\t# Guess the associated value for plotting.\n\t\tvalues = []\n\t\tfor option in [\"Value\", \"Year\"]:\n\t\t\tif option in df:\n\t\t\t\tvalues = df[option].tolist()\n\t\t\t\tbreak\n\t\tif not values: values = [1] * len(longitudes)\n\n\n\t\t#  Get the data ready.\n\t\tdata = list(zip(latitudes, longitudes, values))\n\n\t\t# Find a decent initial zoom.\n\t\tmap = FoliumMap((latitudes[0], longitudes[0]), tiles=input.MapType())\n\t\tHeatMap(data, min_opacity=input.Opacity(), radius=input.Radius(), blur=input.Blur()).add_to(map)\n\t\tmap.fit_bounds(map.get_bounds())\n\n\t\treturn map\n\n\n\t@output\n\t@render.table\n\tasync def LoadedTable(): return await LoadData()\n\n\n\t@output\n\t@render.ui\n\tasync def Map(): return await LoadMap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@session.download(filename=\"table.csv\")\n\tasync def DownloadTable(): yield await LoadData().to_string()\n\n\n\t@session.download(filename=\"heatmap.html\")\n\tasync def DownloadHeatmap(): yield await LoadMap().get_root().render()\n\n\n\napp_ui = ui.page_fluid(\n\n\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\tui.navset_bar(\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>'), value=\"Expression\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>'), value=\"Pairwise\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Image</a>'), value=\"Image\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>'), value=\"Geomap\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">About</a>'), value=\"About\"),\n\t\ttitle=\"Heatmapper\",\n\t\tselected=\"Geocoordinate\",\n\t),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\"),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"File\", \"Choose a File\", accept=[\".csv\", \".txt\", \"xlsx\"], multiple=False),\n\t\t\t),\n\n\t\t\t# Otherwise, add the example selection and an info button.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Example'\",\n\n\t\t\t\t# Put them side-by-side.\n\t\t\t\tui.layout_columns(\n\n\t\t\t\t\tui.input_select(id=\"Example\", label=None, choices={\n\t\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\t\"example3.txt\": \"Example 3\"},\n\t\t\t\t\t\tmultiple=False),\n\t\t\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\t\t\tcol_widths=[10,2],\n\t\t\t\t)\n\t\t\t),\n\n\t\t\t# All the features related to map customization are here.\n\t\t\tui.HTML(\"Map Customization\"),\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.input_slider(id=\"Radius\", label=\"Size of Points\", value=25, min=5, max=50, step=5),\n\t\t\tui.input_slider(id=\"Blur\", label=\"Blurring\", value=15, min=1, max=30, step=1),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.layout_columns(\n\t\t\t\tui.download_button(\"DownloadHeatmap\", \"Download Heatmap\"),\n\t\t\t\tui.download_button(\"DownloadTable\", \"Download Table\")\n\t\t\t),\n\n\n\t\t\tid=\"SidebarPanel\",\n\t\t\twidth=350\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"),),\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}]