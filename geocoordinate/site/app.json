[{"name": "app.py", "content": "#\n# Heatmapper\n# Geocoordinate\n#\n# This file contains the ShinyLive application for Geocoordinate Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n#\n\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom folium import Map as FoliumMap\nfrom folium.plugins import HeatMap\nfrom pandas import DataFrame\n\nfrom shared import Table, Cache, NavBar, FileSelection\n\n# Fine, Shiny\nimport branca, certifi, xyzservices\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset shows deaths from a cholera outbreak in 1854. John Snow used this data in conjunction with local pump locations as evidence that cholera is spread by contaminated water. A digitised version of the data is available online, courtesy of Robin Wilson (robin@rtwilson.com).\",\n\t\t\"example2.txt\": \"This example data set shows bike thefts in Vancouver in 2011. The data was obtained from a 2013 Vancouver Sun blog post by Chad Skelton.\",\n\t\t\"example3.txt\": \"This example data set shows the location of traffic signals in Toronto. The data was obtained from Toronto Open Data. The idea to use this data set comes from this R-bloggers post by Myles Harrison.\"\n\t}\n\n\tDataCache = Cache(\"geocoordinate\")\n\n\tasync def LoadMap():\n\t\t\"\"\"\n\t\t@brief Generates a map with the provided information\n\t\t@returns the Folium.Map\n\t\t\"\"\"\n\n\t\tdf = await DataCache.Load(input)\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty: return FoliumMap((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\t\t# Get the long and lat.\n\t\tlongitudes = df[\"Longitude\"].tolist()\n\t\tlatitudes = df[\"Latitude\"].tolist()\n\n\t\t# Guess the associated value for plotting.\n\t\tvalues = []\n\t\tfor option in [\"Value\", \"Year\"]:\n\t\t\tif option in df:\n\t\t\t\tvalues = df[option].tolist()\n\t\t\t\tbreak\n\t\tif not values: values = [1] * len(longitudes)\n\n\n\t\t#  Get the data ready.\n\t\tdata = list(zip(latitudes, longitudes, values))\n\n\t\t# Find a decent initial zoom.\n\t\tmap = FoliumMap((latitudes[0], longitudes[0]), tiles=input.MapType())\n\t\tHeatMap(data, min_opacity=input.Opacity(), radius=input.Radius(), blur=input.Blur()).add_to(map)\n\t\tmap.fit_bounds(map.get_bounds())\n\n\t\treturn map\n\n\n\t@output\n\t@render.data_frame\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, ignore_none=False, ignore_init=False)\n\tasync def LoadedTable(): return await DataCache.Load(input)\n\n\n\t@output\n\t@render.ui\n\t@reactive.event(input.Update, input.Reset, input.Example, input.File, input.UpdateMap, ignore_none=False, ignore_init=False)\n\tasync def Map(): return await LoadMap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@render.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await DataCache.Load(input); yield df.to_string()\n\n\n\t@render.download(filename=\"heatmap.html\")\n\tasync def DownloadHeatmap(): m = await LoadMap(); yield m.get_root().render()\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Update)\n\tasync def Update(): await DataCache.Update(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.Reset)\n\tasync def Reset(): await DataCache.Purge(input)\n\n\n\t@reactive.Effect\n\t@reactive.event(input.TableRow, input.TableCol, input.Example, input.File, input.Reset, input.Update)\n\tasync def UpdateTableValue():\n\t\t\"\"\"\n\t\t@brief Updates the label for the Value input to display the current value.\n\t\t\"\"\"\n\t\tdf = await DataCache.Load(input)\n\n\t\trows, columns = df.shape\n\t\trow, column = int(input.TableRow()), int(input.TableCol())\n\n\t\tif 0 <= row <= rows and 0 <= column <= columns:\n\t\t\tui.update_text(id=\"TableVal\", label=\"Value (\" + str(df.iloc[row, column]) + \")\"),\n\n\napp_ui = ui.page_fluid(\n\n\tNavBar(\"Geocoordinate\"),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\tFileSelection(\n\t\t\t\texamples={\"example1.txt\": \"Example 1\", \"example2.txt\": \"Example 2\",\"example3.txt\": \"Example 3\"},\n\t\t\t\ttypes=[\".csv\", \".txt\", \".xlsx\"]\n\t\t\t),\n\n\t\t\tui.input_action_button(\"UpdateMap\", \"Update Heatmap\"),\n\n\t\t\tui.br(),\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.input_slider(id=\"Radius\", label=\"Size of Points\", value=25, min=5, max=50, step=5),\n\t\t\tui.input_slider(id=\"Blur\", label=\"Blurring\", value=15, min=1, max=30, step=1),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.download_button(\"DownloadHeatmap\", \"Heatmap\"),\n\t\t\tui.download_button(\"DownloadTable\", \"Table\"),\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\t\t\t\tTable,\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}, {"name": "shared.py", "content": "from shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom io import BytesIO\nfrom sys import modules\nfrom copy import deepcopy\nfrom pathlib import Path\n\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tPyodide = True\nelse:\n\tfrom os.path import exists\n\tPyodide = False\n\n\nclass Cache:\n\n\t@staticmethod\n\tdef DefaultHandler(n, i):\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": df = read_csv(i)\n\t\t\tcase \".xlsx\": df = read_excel(i)\n\t\t\tcase _: df = read_table(i)\n\t\treturn df.fillna(0)\n\n\t@staticmethod\n\tasync def Remote(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\n\n\t@staticmethod\n\tasync def Local(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n\tdef __init__(self, project, DataHandler = DefaultHandler):\n\t\tself._primary = {}\n\t\tself._secondary = {}\n\t\tself._handler = DataHandler\n\n\t\tif Pyodide:\n\t\t\tself.Download = lambda url: Cache.Remote(url)\n\t\t\tself.Source = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/{}/example_input/\".format(project)\n\t\telse:\n\t\t\tself.Download = lambda url: Cache.Local(url)\n\t\t\tself.Source = \"../example_input/\"\n\n\n\tasync def Load(self, input): n = await self.N(input); return DataFrame() if n is None else self._secondary[n]\n\n\n\tasync def N(self, input):\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\n\t\t\t# Populate the base cache, if we need to\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, read(file[0][\"datapath\"], \"wb\"))\n\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tif n not in self._primary: self._primary[n] = self._handler(n, BytesIO(await self.Download(self.Source + n)))\n\t\tif n not in self._secondary: self._secondary[n] = deepcopy(self._primary[n])\n\t\treturn n\n\n\n\tdef Cache(self): return self._secondary\n\n\n\tasync def Update(self, input):\n\t\t# Get the data\n\t\tdf = await self.Load(input)\n\n\t\trow_count, column_count = df.shape\n\t\trow, column = input.TableRow(), input.TableCol()\n\n\t\t# So long as row and column are sane, update.\n\t\tif row < row_count and column < column_count:\n\t\t\tmatch input.Type():\n\t\t\t\tcase \"Integer\": df.iloc[row, column] = int(input.TableVal())\n\t\t\t\tcase \"Float\": df.iloc[row, column] = float(input.TableVal())\n\t\t\t\tcase \"String\": df.iloc[row, column] = input.TableVal()\n\n\n\tasync def Purge(self, input):\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None: return None\n\t\t\tn = file[0][\"name\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\tdel self._secondary[n]\n\n\ndef NavBar(current):\n\treturn [\n\t\t\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\n\t\tui.navset_bar(\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html>Expression</a>'), value=\"Expression\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html>Pairwise</a>'), value=\"Pairwise\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html>Image</a>'), value=\"Image\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html>Geomap</a>'), value=\"Geomap\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html>Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\t\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>About</a>'), value=\"About\"),\n\t\t\t\ttitle=\"Heatmapper\",\n\t\t\t\tselected=current,\n\t\t)\n\t]\n\n\ndef FileSelection(examples, types):\n\t# If the user needs help with the formatting.\n\treturn [ui.HTML('<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>'),\n\n\t# Specify whether to use example files, or upload one.\n\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t# Only display an input dialog if the user is one Upload\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Upload'\",\n\t\tui.input_file(\"File\", \"Choose a File\", accept=types, multiple=False),\n\t),\n\n\t# Otherwise, add the example selection and an info button.\n\tui.panel_conditional(\n\t\t\"input.SourceFile === 'Example'\",\n\t\tui.layout_columns(\n\t\t\tui.input_select(id=\"Example\", label=None, choices=examples, multiple=False),\n\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\tcol_widths=[10,2],\n\t\t)\n\t)]\n\n\nTable = ui.nav_panel(\"Table\",\n\tui.layout_columns(\n\t\tui.input_numeric(\"TableRow\", \"Row\", 0),\n\t\tui.input_numeric(\"TableCol\", \"Column\", 0),\n\t\tui.input_text(\"TableVal\", \"Value\", 0),\n\t\tui.input_select(id=\"Type\", label=\"Datatype\", choices=[\"Integer\", \"Float\", \"String\"]),\n\t\tcol_widths=[2,2,6,2],\n\t),\n\tui.layout_columns(\n\t\tui.input_action_button(\"Update\", \"Update\"),\n\t\tui.input_action_button(\"Reset\", \"Reset Values\"),\n\t),\n\tui.output_data_frame(\"LoadedTable\"),\n)\n", "type": "text"}]