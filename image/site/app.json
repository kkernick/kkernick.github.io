[{"name": "app.py", "content": "#\n# Heatmapper\n# Image\n#\n# This file contains the ShinyLive application for Image Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n# Last Modified: 2024/02/06\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom PIL import Image\nfrom io import BytesIO\nfrom sys import modules\nfrom pathlib import Path\n\n\n# Interoperability between ShinyLive and PyShiny\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tSource = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/image/example_input/\"\n\tasync def download(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\nelse:\n\tfrom os.path import exists\n\tSource = \"../example_input/\"\n\tasync def download(url): return open(url, \"rb\").read() if exists(url) else None\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\t# Cache the example to prevent multiple fetches.\n\tCache = {}\n\n\t# Information regarding example files.\n\tInfo = {\n\t\t\"Example 1\": {\n\t\t\t\"Table\": \"example1.txt\",\n\t\t\t\"Image\": \"example1.jpg\",\n\t\t\t\"Description\": \"Hypothetical example illustrating data overlaid on a satellite image. Input data are count or magnitude values within the overlaid grid sections.\"\n\t\t}\n\t}\n\n\n\tasync def LoadData():\n\t\t\"\"\"\n\t\t@brief Returns a DataFrame containing the heatmap table\n\t\t@returns \tA DataFrame, who's format can either be a matrix grid, or a chart\n\t\t\t\t\t\t\tcontaining x, y, and value columns.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn DataFrame()\n\t\t\tn = file[0][\"name\"]\n\t\t\tf = file[0][\"datapath\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tf = Cache[n] if n in Cache else BytesIO(await download(Source + Info[input.Example()][\"Table\"]))\n\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": return read_csv(f)\n\t\t\tcase \".xlsx\": return read_excel(f)\n\t\t\tcase _: return read_table(f)\n\n\n\tasync def LoadImage():\n\t\t\"\"\"\n\t\t@brief Loads the image to render behind the heatmap.\n\t\t@returns an Image object, if an image is specified, otherwise None.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.Image()\n\t\t\treturn None if file is None else Image.open(file[0][\"datapath\"])\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\treturn Cache[n] if n in Cache else Image.open(BytesIO(await download(Source + Info[input.Example()][\"Image\"])))\n\n\n\tasync def GenerateHeatmap():\n\t\t\"\"\"\n\t\t@brief Generates the heatmap, overlaying the Image with the DataFrame\n\t\t@returns The Plot's axis, for downloading purposes.\n\t\t\"\"\"\n\n\t\tdf = await LoadData()\n\t\timg = await LoadImage()\n\n\t\tif df.empty: return None\n\n\t\t# Wrangle into an acceptable format.\n\t\tif {'x', 'y', 'value'}.issubset(df.columns):\n\t\t\tdf = df.pivot(index='y', columns='x', values='value')\n\n\t\tfig, ax = plt.subplots()\n\n\t\t# Add the image as an overlay, if we have one.\n\t\tif img is not None: ax.imshow(img, extent=[0, 1, 0, 1], aspect='auto',zorder=0)\n\n\t\tim = ax.imshow(df, cmap=input.ColorMap().lower(), interpolation=input.Interpolation().lower(), aspect='auto', extent=[0, 1, 0, 1], zorder=1, alpha=input.Opacity())\n\t\tplt.colorbar(im, ax=ax, label='Value')\n\n\t\tplt.tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False, labelbottom=False, labelleft=False)\n\n\t\treturn ax\n\n\n\t@output\n\t@render.table\n\tasync def LoadedTable(): return await LoadData()\n\n\n\t@output\n\t@render.plot\n\tasync def Heatmap(): return await GenerateHeatmap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()][\"Description\"]\n\n\n\t@session.download(filename=\"table.csv\")\n\tasync def DownloadTable(): yield await LoadData().to_string()\n\n\n\t@session.download(filename=\"heatmap.png\")\n\tasync def DownloadHeatmap():\n\t\tax = await GenerateHeatmap()\n\n\t\toutput = BytesIO()\n\t\tFigureCanvasAgg(ax.figure).print_png(output)\n\n\t\toutput.seek(0)\n\t\tyield output.read()\n\n\napp_ui = ui.page_fluid(\n\n\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\tui.navset_bar(\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>'), value=\"Expression\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>'), value=\"Pairwise\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Image</a>'), value=\"Image\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>'), value=\"Geomap\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">About</a>'), value=\"About\"),\n\t\ttitle=\"Heatmapper\",\n\t\tselected=\"Image\",\n\t),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"Image\", \"Choose your Image File\", accept=[\".png\", \".jpg\"], multiple=False),\n\t\t\t\tui.input_file(\"File\", \"Choose your Grid File\", accept=[\".csv\", \".txt\", \"xlsx\"], multiple=False),\n\t\t\t),\n\n\t\t\t# Otherwise, add the example selection and an info button.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Example'\",\n\t\t\t\t\"Choose an Example File\",\n\t\t\t\tui.layout_columns(\n\t\t\t\t\tui.input_select(id=\"Example\", label=None, choices=[\"Example 1\"]),\n\t\t\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\t\t\tcol_widths=[10,2],\n\t\t\t\t)\n\t\t\t),\n\n\t\t\tui.HTML(\"Heatmap Customization\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\n\t\t\t# https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html\n\t\t\tui.input_select(id=\"Interpolation\", label=\"Interpolation\", choices=[\"None\", \"Antialiased\", \"Nearest\", \"Bilinear\", \"Bicubic\", \"Spline16\", \"Spline36\", \"Hanning\", \"Hamming\", \"Hermite\", \"Kaiser\", \"Quadric\", \"Catrom\", \"Gaussian\", \"Bessel\", \"Mitchell\", \"Sinc\", \"Lanczos\", \"Blackman\"], selected=\"Bilinear\"),\n\n\t\t\t# Set the ColorMap used.\n\t\t\tui.input_select(id=\"ColorMap\", label=\"Color Map\", choices=[\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\", \"Cividis\"], selected=\"Viridis\"),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.layout_columns(\n\t\t\t\tui.download_button(\"DownloadTable\", \"Download Table\"),\n\t\t\t\tui.download_button(\"DownloadHeatmap\", \"Download Heatmap\")\n\t\t\t),\n\n\t\t\tid=\"SidebarPanel\",\n\t\t\twidth=350\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_plot(\"Heatmap\", height=\"90vh\")),\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"),),\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}]