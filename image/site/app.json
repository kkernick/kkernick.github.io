[{"name": "app.py", "content": "from shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\n\nimport numpy as np\nimport pandas as pd\n\nimport jinja2\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg\n\n\nfrom PIL import Image\n\nfrom io import StringIO, BytesIO\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\t# Returns the data of whatever we should generate our map off of.\n\tdef LoadData():\n\n\t\t# To work well with StringIO\n\t\text = \"\"\n\n\t\t# If we have an upload file, try and open it.\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn pd.DataFrame()\n\t\t\tf = file[0][\"datapath\"]\n\t\t\text = f\n\t\telse:\n\t\t\t# TODO: Actually implement the example\n\t\t\treturn pd.DataFrame()\n\n\t\t# Handle extensions.\n\t\tif ext.endswith(\".csv\"):\n\t\t\treturn pd.read_csv(f)\n\t\telif ext.endswith(\".xlsx\"):\n\t\t\treturn pd.read_xlsx(f)\n\t\telse:\n\t\t\treturn pd.read_table(f)\n\n\n\tdef LoadImage():\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.Image()\n\t\t\tif file is None:\n\t\t\t\t\treturn None\n\t\t\treturn Image.open(file[0][\"datapath\"])\n\n\tdef GenerateHeatmap():\n\t\tdf = LoadData()\n\t\timg = LoadImage()\n\n\t\tif df.empty:\n\t\t\treturn None\n\n\t\t# Wrangle into an acceptable format.\n\t\tif {'x', 'y', 'value'}.issubset(df.columns):\n\t\t\tdf = df.pivot(index='y', columns='x', values='value')\n\t\t\t\t\n\t\tfig, ax = plt.subplots()\n\n\t\t# Add the image as an overlay\n\t\tif img is not None:\n\t\t\tax.imshow(img, extent=[0, 1, 0, 1], aspect='auto',zorder=0)\n\n\t\tim = ax.imshow(df, cmap='viridis', interpolation=input.Interpolation(), aspect='auto', extent=[0, 1, 0, 1], zorder=1, alpha=input.Opacity())\n\n\t\tcbar = plt.colorbar(im, ax=ax, label='Value')\n\n\t\tplt.tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False, labelbottom=False, labelleft=False)\n\n\t\treturn ax\n\n\n\t@output\n\t@render.table\n\tdef LoadedTable():\n\t\treturn LoadData()\n\n\t@output\n\t@render.plot\n\tdef Heatmap():\n\t\treturn GenerateHeatmap()\n\n\t@session.download(filename=\"table.csv\")\n\tdef DownloadTable():\n\t\tyield LoadData().to_string()\n\n\t@session.download(filename=\"heatmap.png\")\n\tdef DownloadHeatmap():\n\t\tax = GenerateHeatmap()\n\n\t\toutput = BytesIO()\n\t\tFigureCanvasAgg(ax.figure).print_png(output)\n\n\t\toutput.seek(0)\n\t\tyield output.read()\n\n\t\t\n\napp_ui = ui.page_fluid(\n\t# Place the Heatmapper Home on the top.\n\tui.panel_title(ui.HTML('<a href=\"https://kkernick.github.io\">Heatmapper</a>')),\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\"),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"Image\", \"Choose your Image File\", accept=[\".png\", \".jpg\"], multiple=False),\n\t\t\t\tui.input_file(\"File\", \"Choose your Grid File\", accept=[\".csv\", \".txt\", \"xlsx\"], multiple=False),\n\t\t\t),\n\n\t\t\tui.br(),\n\n\t\t\tui.HTML(\"Heatmap Customization\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\t\n\t\t\tui.input_select(id=\"Interpolation\", label=\"Interpolation\", choices={\n\t\t\t\t\t\"antialiased\": \"Antialiased\", \n\t\t\t\t\t\"bilinear\": \"Bilinear\",\n\t\t\t\t\t\"bicubic\": \"Bicubic\",\n\t\t\t\t\t\"quadric\": \"Quadric\",\n\t\t\t\t\t\"gaussian\": \"Gaussian\"\n\t\t\t\t}, \n\t\t\t\tmultiple=False, selected=\"bilinear\"),\n\n\t\t\tui.br(),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.layout_columns(\n\t\t\t\tui.download_button(\"DownloadTable\", \"Download Table\"),\n\t\t\t\tui.download_button(\"DownloadHeatmap\", \"Download Heatmap\")\n\t\t\t),\n\n\t\t\tid=\"SidebarPanel\",\n\t\t\twidth=350\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\n\t\t\t\t# The map\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_plot(\"Heatmap\")),\n\n\t\t\t\t# The table\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"),),\n\t\t),\n\t)\n)\t\n\napp = App(app_ui, server)", "type": "text"}]