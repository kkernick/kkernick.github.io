[{"name": "app.py", "content": "#\n# Heatmapper\n# Geomap\n#\n# This file contains the ShinyLive application for Geomap Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n# Last Modified: 2024/02/06\n#\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom folium import Map as FoliumMap, Choropleth\nfrom pandas import DataFrame, read_csv, read_excel, read_table\nfrom pathlib import Path\nfrom io import BytesIO\nfrom sys import modules\n\n\n# Interoperability between ShinyLive and PyShiny\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tSource = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/geomap/example_input/\"\n\tasync def download(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\nelse:\n\tfrom os.path import exists\n\tSource = \"../example_input/\"\n\tasync def download(url): return open(url, \"rb\").read() if exists(url) else None\n\n\n# Generated from dictionary.sh\nMappings = { \"africa.geojson\": \"Africa\", \"akron.geojson\": \"Akron\", \"alameda.geojson\": \"Alameda\", \"albany.geojson\": \"Albany\", \"albuquerque.geojson\": \"Albuquerque\", \"amsterdam.geojson\": \"Amsterdam\", \"amusement-parks.geojson\": \"Amusement Parks\", \"anchorage.geojson\": \"Anchorage\", \"angers.geojson\": \"Angers\", \"angers-loire-metropole.geojson\": \"Angers Loire Metropole\", \"antwerp.geojson\": \"Antwerp\", \"apulia.geojson\": \"Apulia\", \"arlingtonva.geojson\": \"Arlingtonva\", \"asia.geojson\": \"Asia\", \"athens.geojson\": \"Athens\", \"atlanta.geojson\": \"Atlanta\", \"augsburg.geojson\": \"Augsburg\", \"austin.geojson\": \"Austin\", \"australia.geojson\": \"Australia\", \"austria-oberoesterreich.geojson\": \"Austria Oberoesterreich\", \"austria-states.geojson\": \"Austria States\", \"austria-steiermark.geojson\": \"Austria Steiermark\", \"bad-belzig.geojson\": \"Bad Belzig\", \"badenwuerttemberg-kreise.geojson\": \"Badenwuerttemberg Kreise\", \"baltimore.geojson\": \"Baltimore\", \"bari.geojson\": \"Bari\", \"basel.geojson\": \"Basel\", \"bayern.geojson\": \"Bayern\", \"belgium-arrondissements.geojson\": \"Belgium Arrondissements\", \"berlin.geojson\": \"Berlin\", \"bern-districts.geojson\": \"Bern Districts\", \"bern-quarters.geojson\": \"Bern Quarters\", \"birmingham.geojson\": \"Birmingham\", \"blacksburg.geojson\": \"Blacksburg\", \"blumenau.geojson\": \"Blumenau\", \"bogota.geojson\": \"Bogota\", \"boston.geojson\": \"Boston\", \"brandenburg.geojson\": \"Brandenburg\", \"brandenburg-municipalities.geojson\": \"Brandenburg Municipalities\", \"braunschweig.geojson\": \"Braunschweig\", \"brazil-states.geojson\": \"Brazil States\", \"bremen.geojson\": \"Bremen\", \"bronx.geojson\": \"Bronx\", \"brooklyn.geojson\": \"Brooklyn\", \"buenos-aires.geojson\": \"Buenos Aires\", \"calgary.geojson\": \"Calgary\", \"california-counties.geojson\": \"California Counties\", \"california-vista-points.geojson\": \"California Vista Points\", \"caltrain-stations.geojson\": \"Caltrain Stations\", \"canada.geojson\": \"Canada\", \"canberra.geojson\": \"Canberra\", \"caribbean-islands.geojson\": \"Caribbean Islands\", \"chapel-hill.geojson\": \"Chapel Hill\", \"charlotte.geojson\": \"Charlotte\", \"charlottesville.geojson\": \"Charlottesville\", \"chemnitz.geojson\": \"Chemnitz\", \"chesapeake.geojson\": \"Chesapeake\", \"chicago.geojson\": \"Chicago\", \"china.geojson\": \"China\", \"cincinnati.geojson\": \"Cincinnati\", \"cleveland.geojson\": \"Cleveland\", \"cologne.geojson\": \"Cologne\", \"colorado-counties.geojson\": \"Colorado Counties\", \"columbus.geojson\": \"Columbus\", \"copenhagen.geojson\": \"Copenhagen\", \"cuba.geojson\": \"Cuba\", \"dallas.geojson\": \"Dallas\", \"dane-county-municipalities.geojson\": \"Dane County Municipalities\", \"denmark-municipalities.geojson\": \"Denmark Municipalities\", \"denver.geojson\": \"Denver\", \"des-moines.geojson\": \"Des Moines\", \"detroit.geojson\": \"Detroit\", \"dresden.geojson\": \"Dresden\", \"dublin.geojson\": \"Dublin\", \"duesseldorf.geojson\": \"Duesseldorf\", \"durham.geojson\": \"Durham\", \"edmonton.geojson\": \"Edmonton\", \"eindhoven.geojson\": \"Eindhoven\", \"enschede.geojson\": \"Enschede\", \"esztergom.geojson\": \"Esztergom\", \"europe-1914.geojson\": \"Europe 1914\", \"europe-1938.geojson\": \"Europe 1938\", \"europe-capitals.geojson\": \"Europe Capitals\", \"europe.geojson\": \"Europe\", \"fairbanks.geojson\": \"Fairbanks\", \"fargo.geojson\": \"Fargo\", \"fort-lauderdale.geojson\": \"Fort Lauderdale\", \"france-departments.geojson\": \"France Departments\", \"france-regions.geojson\": \"France Regions\", \"frankfurt-main.geojson\": \"Frankfurt Main\", \"freiburg.geojson\": \"Freiburg\", \"geneva.geojson\": \"Geneva\", \"germany-capitals.geojson\": \"Germany Capitals\", \"germany.geojson\": \"Germany\", \"ghent.geojson\": \"Ghent\", \"gisborne.geojson\": \"Gisborne\", \"grand-rapids.geojson\": \"Grand Rapids\", \"greece-prefectures.geojson\": \"Greece Prefectures\", \"greece-regions.geojson\": \"Greece Regions\", \"hamburg.geojson\": \"Hamburg\", \"hampton.geojson\": \"Hampton\", \"hartford.geojson\": \"Hartford\", \"henderson.geojson\": \"Henderson\", \"honolulu.geojson\": \"Honolulu\", \"houston.geojson\": \"Houston\", \"hungary.geojson\": \"Hungary\", \"illinois-counties.geojson\": \"Illinois Counties\", \"india.geojson\": \"India\", \"indianapolis.geojson\": \"Indianapolis\", \"iran-provinces.geojson\": \"Iran Provinces\", \"ireland-counties.geojson\": \"Ireland Counties\", \"isle-of-man.geojson\": \"Isle Of Man\", \"italy-provinces.geojson\": \"Italy Provinces\", \"italy-regions.geojson\": \"Italy Regions\", \"james-city-county.geojson\": \"James City County\", \"japan.geojson\": \"Japan\", \"kaiserslautern.geojson\": \"Kaiserslautern\", \"kansas-city.geojson\": \"Kansas City\", \"korea.geojson\": \"Korea\", \"las-vegas.geojson\": \"Las Vegas\", \"leipzig.geojson\": \"Leipzig\", \"le-mans-cantons.geojson\": \"Le Mans Cantons\", \"lexington.geojson\": \"Lexington\", \"liberia-central.geojson\": \"Liberia Central\", \"liberia-east.geojson\": \"Liberia East\", \"liberia.geojson\": \"Liberia\", \"liberia-west.geojson\": \"Liberia West\", \"lombardy.geojson\": \"Lombardy\", \"london.geojson\": \"London\", \"london-underground.geojson\": \"London Underground\", \"long-beach.geojson\": \"Long Beach\", \"los-angeles-county.geojson\": \"Los Angeles County\", \"los-angeles.geojson\": \"Los Angeles\", \"louisville.geojson\": \"Louisville\", \"luxembourg-cantons.geojson\": \"Luxembourg Cantons\", \"luxembourg-communes.geojson\": \"Luxembourg Communes\", \"luzern.geojson\": \"Luzern\", \"macon.geojson\": \"Macon\", \"madrid-districts.geojson\": \"Madrid Districts\", \"madrid.geojson\": \"Madrid\", \"malaysia.geojson\": \"Malaysia\", \"manhattan-bridges.geojson\": \"Manhattan Bridges\", \"manhattan.geojson\": \"Manhattan\", \"melbourne.geojson\": \"Melbourne\", \"mexico.geojson\": \"Mexico\", \"miami.geojson\": \"Miami\", \"middle_east_countries.geojson\": \"Middle_east_countries\", \"milan.geojson\": \"Milan\", \"milwaukee.geojson\": \"Milwaukee\", \"minneapolis-cities.geojson\": \"Minneapolis Cities\", \"minneapolis.geojson\": \"Minneapolis\", \"mississauga.geojson\": \"Mississauga\", \"montreal.geojson\": \"Montreal\", \"moscow.geojson\": \"Moscow\", \"muenster.geojson\": \"Muenster\", \"new-haven.geojson\": \"New Haven\", \"new-orleans.geojson\": \"New Orleans\", \"new-york-areas-of-interest.geojson\": \"New York Areas Of Interest\", \"new-york-city-boroughs.geojson\": \"New York City Boroughs\", \"new-york-counties.geojson\": \"New York Counties\", \"nordrhein-westfalen.geojson\": \"Nordrhein Westfalen\", \"norfolk.geojson\": \"Norfolk\", \"north-america.geojson\": \"North America\", \"north-carolina-cities.geojson\": \"North Carolina Cities\", \"oakland.geojson\": \"Oakland\", \"oceania.geojson\": \"Oceania\", \"oklahoma-cities.geojson\": \"Oklahoma Cities\", \"oklahoma-counties.geojson\": \"Oklahoma Counties\", \"olympia.geojson\": \"Olympia\", \"oman.geojson\": \"Oman\", \"oman-provinces.geojson\": \"Oman Provinces\", \"orlando.geojson\": \"Orlando\", \"pakistan.geojson\": \"Pakistan\", \"paris.geojson\": \"Paris\", \"peaks.geojson\": \"Peaks\", \"philadelphia.geojson\": \"Philadelphia\", \"phoenix.geojson\": \"Phoenix\", \"pittsburgh.geojson\": \"Pittsburgh\", \"poland.geojson\": \"Poland\", \"poland-parks.geojson\": \"Poland Parks\", \"porirua.geojson\": \"Porirua\", \"portland.geojson\": \"Portland\", \"portugal.geojson\": \"Portugal\", \"potsdam.geojson\": \"Potsdam\", \"prague.geojson\": \"Prague\", \"providence.geojson\": \"Providence\", \"quebec.geojson\": \"Quebec\", \"queens.geojson\": \"Queens\", \"raleigh.geojson\": \"Raleigh\", \"red-deer.geojson\": \"Red Deer\", \"richmond.geojson\": \"Richmond\", \"riga.geojson\": \"Riga\", \"rio-de-janeiro.geojson\": \"Rio De Janeiro\", \"rochester.geojson\": \"Rochester\", \"rockville.geojson\": \"Rockville\", \"roller-coasters-fastest-steel.geojson\": \"Roller Coasters Fastest Steel\", \"romania.geojson\": \"Romania\", \"rome-rioni.geojson\": \"Rome Rioni\", \"rotterdam.geojson\": \"Rotterdam\", \"russia.geojson\": \"Russia\", \"sacramento.geojson\": \"Sacramento\", \"salt-lake-city.geojson\": \"Salt Lake City\", \"san-antonio.geojson\": \"San Antonio\", \"san-diego.geojson\": \"San Diego\", \"san-francisco.geojson\": \"San Francisco\", \"san-jose.geojson\": \"San Jose\", \"saskatoon.geojson\": \"Saskatoon\", \"savannah.geojson\": \"Savannah\", \"seattle.geojson\": \"Seattle\", \"seoul.geojson\": \"Seoul\", \"serbia.geojson\": \"Serbia\", \"silicon-valley.geojson\": \"Silicon Valley\", \"south-africa.geojson\": \"South Africa\", \"south-america.geojson\": \"South America\", \"southeast-asia.geojson\": \"Southeast Asia\", \"spain-communities.geojson\": \"Spain Communities\", \"spain-provinces.geojson\": \"Spain Provinces\", \"springfield.geojson\": \"Springfield\", \"stamford.geojson\": \"Stamford\", \"staten-island.geojson\": \"Staten Island\", \"st-louis.geojson\": \"St Louis\", \"st-petersburg.geojson\": \"St Petersburg\", \"surrey.geojson\": \"Surrey\", \"sweden-counties.geojson\": \"Sweden Counties\", \"switzerland.geojson\": \"Switzerland\", \"sydney.geojson\": \"Sydney\", \"szczecin.geojson\": \"Szczecin\", \"taiwan.geojson\": \"Taiwan\", \"tampa.geojson\": \"Tampa\", \"the-hague.geojson\": \"The Hague\", \"the-netherlands.geojson\": \"The Netherlands\", \"thessaloniki.geojson\": \"Thessaloniki\", \"toronto.geojson\": \"Toronto\", \"tucson.geojson\": \"Tucson\", \"turkey.geojson\": \"Turkey\", \"turku.geojson\": \"Turku\", \"ulm.geojson\": \"Ulm\", \"united-kingdom.geojson\": \"United Kingdom\", \"united-kingdom-regions.geojson\": \"United Kingdom Regions\", \"united-states-1810.geojson\": \"United States 1810\", \"united-states-big-cities.geojson\": \"United States Big Cities\", \"united-states.geojson\": \"United States\", \"united-states-international-airports.geojson\": \"United States International Airports\", \"united-states-mlb-stadiums.geojson\": \"United States Mlb Stadiums\", \"unna.geojson\": \"Unna\", \"utrecht.geojson\": \"Utrecht\", \"vancouver.geojson\": \"Vancouver\", \"venice.geojson\": \"Venice\", \"venlo.geojson\": \"Venlo\", \"vermont-counties.geojson\": \"Vermont Counties\", \"vienna.geojson\": \"Vienna\", \"villetta.geojson\": \"Villetta\", \"washington.geojson\": \"Washington\", \"wellington.geojson\": \"Wellington\", \"west-linn.geojson\": \"West Linn\", \"west-palm-beach.geojson\": \"West Palm Beach\", \"wiesenburg.geojson\": \"Wiesenburg\", \"williamsburg.geojson\": \"Williamsburg\", \"windsor.geojson\": \"Windsor\", \"winterthur.geojson\": \"Winterthur\", \"zurich-city.geojson\": \"Zurich City\", \"zurich.geojson\": \"Zurich\" }\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\tCache = {}\n\tInfo = {\n\t\t\"example1.txt\": \"This example file is from the Open Data Portal. The data is from a carbon monoxide emissions study conducted by Environment Canada. The three columns represent results from 1990, 2000, and 2013.\",\n\t\t\"example2.txt\": \"This example file is from Statistics Canada. The data is adapted from New cases and age-standardized rate for primary cancer (based on the February 2014 CCR tabulation file), by cancer type and sex, Canada, provinces and territories. The columns represent new cancer cases (age-standardized rate per 100,000 population) from 2006 to 2010.\",\n\t\t\"example3.txt\": \"This example file is from the U.S. Centers for Disease Control and Prevention. The data is from Diagnosed Diabetes, Age Adjusted Rate (per 100), Adults - Total, 2013.\"\n\t}\n\n\n\tasync def LoadData():\n\t\t\"\"\"\n\t\t@brief Returns the DataFrame representation of the data to place on the map\n\t\t@returns The DataFrame\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn DataFrame()\n\t\t\tn = file[0][\"name\"]\n\t\t\tf = file[0][\"datapath\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tf = Cache[n] if n in Cache else BytesIO(await download(Source + input.Example()))\n\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": return read_csv(f)\n\t\t\tcase \".xlsx\": return read_excel(f)\n\t\t\tcase _: return read_table(f)\n\n\n\tdef LoadJSON():\n\t\t\"\"\"\n\t\t@brief Returns the GeoJSON depending on whether the user wants to use a provided one, or their own.\n\t\t@returns Either the path to the uploaded file, or the URL to the one provided by us (Folium supports both)\n\t\t\"\"\"\n\n\t\tURL = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/geomap/data/\"\n\n\t\tif input.JSONFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.JSONUpload()\n\t\t\tif file is None:\n\t\t\t\treturn URL + \"canada.geojson\"\n\t\t\treturn file[0][\"datapath\"]\n\t\telse:\n\t\t\treturn URL + input.JSONSelection()\n\n\n\tasync def LoadMap():\n\t\t\"\"\"\n\t\t@brief Generates a map with the provided information\n\t\t@returns the Folium.Map\n\t\t\"\"\"\n\n\t\tdf = await LoadData()\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty: return FoliumMap((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\t\t# Create map\n\t\tmap = FoliumMap(tiles=input.MapType())\n\n\t\tkey = df.columns[0] if input.KeyColumn() is None else input.KeyColumn()\n\t\tvalue = df.columns[1] if input.ValueColumn() is None else input.ValueColumn()\n\n\t\t# Add the heatmap and return.\n\t\tChoropleth(\n\t\t\t\tgeo_data=LoadJSON(),\n\t\t\t\tname='choropleth',\n\t\t\t\tdata=df,\n\t\t\t\tcolumns=[key, value],\n\t\t\t\tkey_on='feature.properties.name',\n\t\t\t\tfill_color=input.ColorMap(),\n\t\t\t\tfill_opacity=input.Opacity(),\n\t\t\t\tline_opacity=input.Opacity(),\n\t\t\t\tlegend_name='Legend',\n\t\t\t\tbins=input.Bins()\n\t\t).add_to(map)\n\n\t\tmap.fit_bounds(map.get_bounds())\n\n\t\treturn map\n\n\n\t@output\n\t@render.table\n\tasync def LoadedTable(): return await LoadData()\n\n\n\t@output\n\t@render.ui\n\tasync def Map(): return await LoadMap()\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@session.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await LoadData(); yield df.to_string()\n\n\n\t@session.download(filename=\"heatmap.html\")\n\tasync def DownloadHeatmap(): m = await LoadMap(); yield m.get_root().render()\n\n\n\t@reactive.Effect\n\tasync def _():\n\n\t\t# Give options for the key and value columns\n\t\tdf = await LoadData()\n\t\tchoices = df.columns.tolist()\n\t\tif choices:\n\t\t\tdefault_key = input.KeyColumn() if input.KeyColumn() is not None else df.columns[0]\n\t\t\tdefault_value = input.ValueColumn() if input.ValueColumn() is not None else df.columns[1]\n\n\t\t\tui.update_select(id=\"KeyColumn\", choices=choices, selected=default_key)\n\t\t\tui.update_select(id=\"ValueColumn\", choices=choices, selected=default_value)\n\n\napp_ui = ui.page_fluid(\n\n\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\tui.navset_bar(\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>'), value=\"Expression\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>'), value=\"Pairwise\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Image</a>'), value=\"Image\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>'), value=\"Geomap\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">About</a>'), value=\"About\"),\n\t\ttitle=\"Heatmapper\",\n\t\tselected=\"Geomap\",\n\t),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"File\", \"Choose a File\", accept=[\".csv\", \".txt\", \"xlsx\"], multiple=False),\n\t\t\t),\n\n\t\t\t# Otherwise, add the example selection and an info button.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Example'\",\n\n\t\t\t\t# Put them side-by-side.\n\t\t\t\tui.layout_columns(\n\t\t\t\t\tui.input_select(id=\"Example\", label=None, choices={\n\t\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\t\"example3.txt\": \"Example 3\"},\n\t\t\t\t\t\tmultiple=False),\n\t\t\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\t\t\tcol_widths=[10,2],\n\t\t\t\t)\n\t\t\t),\n\n\t\t\tui.input_radio_buttons(id=\"JSONFile\", label=\"Specify a GeoJSON File\", choices=[\"Provided\", \"Upload\"], selected=\"Provided\", inline=True),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.JSONFile === 'Upload'\",\n\t\t\t\tui.input_file(\"JSONUpload\", \"Choose a File\", accept=[\".geojson\"], multiple=False),\n\t\t\t),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.JSONFile === 'Provided'\",\n\t\t\t\tui.input_select(id=\"JSONSelection\", label=None, choices=Mappings, multiple=False, selected=\"canada.geojson\"),\n\t\t\t),\n\n\t\t\t\"Table Customization\",\n\n\t\t\tui.input_select(id=\"KeyColumn\", label=\"Key\", choices=[], multiple=False),\n\t\t\tui.input_select(id=\"ValueColumn\", label=\"Value\", choices=[], multiple=False),\n\n\n\t\t\t# All the features related to map customization are here.\n\t\t\t\"Map Customization\",\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_select(id=\"ColorMap\", label=\"Color Map\", choices={\n\t\t\t\t\"BuGn\": \"Blue-Green\",\n\t\t\t\t\"BuPu\": \"Blue-Purple\",\n\t\t\t\t\"GnBu\": \"Green-Blue\",\n\t\t\t\t\"OrRd\": \"Orange-Red\",\n\t\t\t\t\"PuBu\": \"Purple-Blue\",\n\t\t\t\t\"PuBuGn\": \"Purple-Blue-Green\",\n\t\t\t\t\"PuRd\": \"Purple-Red\",\n\t\t\t\t\"RdPu\": \"Red-Purple\",\n\t\t\t\t\"YlGn\": \"Yellow-Green\",\n\t\t\t\t\"YlGnBu\": \"Yellow-Green-Blue\",\n\t\t\t\t\"YlOrBr\": \"Yellow-Orange-Brown\",\n\t\t\t\t\"YlOrRd\": \"Yellow-Orange-Red\",\n\t\t\t\t\"BrBG\": \"Brown-Blue-Green\",\n\t\t\t\t\"PRGn\": \"Purple-Red-Green\",\n\t\t\t\t\"PiYG\": \"Pink-Yellow-Green\",\n\t\t\t\t\"PuOr\": \"Purple-Orange\",\n\t\t\t\t\"RdBu\": \"Red-Blue\",\n\t\t\t\t\"RdGy\": \"Red-Grey\",\n\t\t\t\t\"RdYlBu\": \"Red-Yellow-Blue\",\n\t\t\t\t\"RdYlGn\": \"Red-Yellow-Green\",\n\t\t\t\t\"Spectral\": \"Spectral\",\n\t\t\t\t\"Accent\": \"Accent\",\n\t\t\t\t\"Dark2\": \"Dark\",\n\t\t\t\t\"Paired\": \"Paired\",\n\t\t\t\t\"Pastel1\": \"Pastel 1\",\n\t\t\t\t\"Pastel2\": \"Pastel 2\",\n\t\t\t\t\"Set1\": \"Set 1\",\n\t\t\t\t\"Set2\": \"Set 2\",\n\t\t\t\t\"Set3\": \"Set 3\"\n\t\t\t}, selected=\"Viridis\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\t\t\tui.input_slider(id=\"Bins\", label=\"Number of Colors\", value=8, min=3, max=8, step=1),\n\n\t\t\t# Add the download buttons.\n\t\t\t\"Download\",\n\t\t\tui.download_button(\"DownloadHeatmap\", \"Heatmap\"),\n\t\t\tui.download_button(\"DownloadTable\", \"Table\"),\n\n\t\t\tid=\"SidebarPanel\",\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"),),\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}]