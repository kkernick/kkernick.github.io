[{"name": "app.py", "content": "from shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\n\n# We need to import here so ShinyLive doesn't get upset.\nimport certifi, branca, xyzservices\nimport folium\nfrom folium.plugins import HeatMap\n\nimport pandas as pd\n\nfrom pathlib import Path\nfrom io import StringIO\n\n\nfrom examples import examples\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\n\t# Returns the data of whatever we should generate our map off of.\n\tdef LoadData():\n\n\t\t# To work well with StringIO\n\t\text = \"\"\n\n\t\t# If we have an upload file, try and open it.\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn pd.DataFrame()\n\t\t\tf = file[0][\"datapath\"]\n\t\t\text = f\n\n\t\t# Otherwise, fetch the example file selected.\n\t\telse:\n\t\t\tf = StringIO(examples[input.ExampleFile()][\"data\"])\n\n\t\t# Handle extensions.\n\t\tif ext.endswith(\".csv\"):\n\t\t\treturn pd.read_csv(f)\n\t\telif ext.endswith(\".xlsx\"):\n\t\t\treturn pd.read_xlsx(f)\n\t\telse:\n\t\t\treturn pd.read_table(f)\n\n\n\tdef LoadJSON():\n\t\tfile: list[FileInfo] | None = input.JSON()\n\t\tif file is None:\n\t\t\t\treturn None\n\t\treturn file[0][\"datapath\"]\n\n\n\t# Generates the Map given the current options selected by the user.\n\tdef LoadMap():\n\t\tdf = LoadData()\n\n\t\t# Give a placeholder map if nothing is selected, which should never really be the case.\n\t\tif df.empty:\n\t\t\treturn folium.Map((53.5213, -113.5213), tiles=input.MapType(), zoom_start=15)\n\n\t\t# Create map\t\t\n\t\tmap = folium.Map(tiles=input.MapType())\n\n\t\tjson = LoadJSON()\n\t\tif json is not None:\n\t\t\tkey = df.columns[0] if input.KeyColumn() is None else input.KeyColumn()\n\t\t\tvalue = df.columns[1] if input.ValueColumn() is None else input.ValueColumn()\n\n\t\t\t# Add the heatmap and return.\n\t\t\tfolium.Choropleth(\n\t\t\t\t\tgeo_data=json,\n\t\t\t\t\tname='choropleth',\n\t\t\t\t\tdata=df,\n\t\t\t\t\tcolumns=[key, value],\n\t\t\t\t\tkey_on='feature.properties.name',\n\t\t\t\t\tfill_color='YlGn',\n\t\t\t\t\tfill_opacity=input.Opacity(),\n\t\t\t\t\tline_opacity=input.Opacity(),\n\t\t\t\t\tlegend_name='Legend'\n\t\t\t).add_to(map)\n\t\treturn map\n\n\n\t@output\n\t@render.table\n\tdef LoadedTable():\n\t\treturn LoadData()\n\n\t@output\n\t@render.ui\n\tdef Map():\n\t\treturn LoadMap()\n\t\t\n\n\t# Update the Popup depending on what example the user has selected.\n\t@reactive.Effect\n\tdef _():\n\t\tui.update_popover(\"InfoPopup\", ui.HTML(examples[input.ExampleFile()][\"info\"]))\n\n\t\tdf = LoadData()\n\t\tchoices = df.columns.tolist()\n\t\tif choices:\n\t\t\tdefault_key = input.KeyColumn() if input.KeyColumn() is not None else df.columns[0] \n\t\t\tdefault_value = input.ValueColumn() if input.ValueColumn() is not None else df.columns[1] \n\n\t\t\tui.update_select(id=\"KeyColumn\", choices=choices, selected=default_key)\n\t\t\tui.update_select(id=\"ValueColumn\", choices=choices, selected=default_value)\n\n\n\t@session.download(filename=\"table.csv\")\n\tdef DownloadTable():\n\t\tyield LoadData().to_string()\n\n\n\t@session.download(filename=\"heatmap.html\")\n\tdef DownloadHeatmap():\n\t\tyield LoadMap().get_root().render()\n\n\n\napp_ui = ui.page_fluid(\n\t# Place the Heatmapper Home on the top.\n\tui.panel_title(ui.HTML('<a href=\"https://kkernick.github.io\">Heatmapper</a>')),\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\"),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"File\", \"Choose a File\", accept=[\".csv\", \".txt\", \"xlsx\"], multiple=False),\n\t\t\t),\n\n\t\t\t# Otherwise, add the example selection and an info button.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Example'\",\n\n\t\t\t\t# Put them side-by-side.\n\t\t\t\tui.layout_columns(\n\n\t\t\t\t\tui.input_select(id=\"ExampleFile\", label=None, choices=[\"Example 1\", \"Example 2\", \"Example 3\"], multiple=False),\n\n\t\t\t\t\t# This message never appears, the server updates it depending\n\t\t\t\t\t# on the selection from the above input selection.\t\t\t\t\t\n\t\t\t\t\tui.popover(\n\t\t\t\t\t\tui.input_action_button(id=\"InfoButton\", label=\"Info\"),\n\t\t\t\t\t\t\"Please choose an example!\",\n\t\t\t\t\t\tid=\"InfoPopup\"\n\t\t\t\t\t),\n\t\t\t\t\tcol_widths=[8,4]\n\t\t\t\t)\n\t\t\t),\n\n\t\t\tui.layout_columns(\n\t\t\t\tui.HTML(\"Choose a GeoJSON file\"),\n\t\t\t\tui.popover(\n\t\t\t\t\tui.input_action_button(id=\"GeoButton\", label=\"Info\"),\n\t\t\t\t\tui.HTML(\"Heatmapper uses GeoJSON files to create country/territory boundaries. A good source is from <a href=https://github.com/codeforgermany/click_that_hood/tree/main/public/data>here</a>.\"),\n\t\t\t\t\tid=\"JSONPopup\"\n\t\t\t\t),\n\t\t\t\tcol_widths=[8,4]\n\t\t\t),\n\n\t\t\tui.input_file(id=\"JSON\", label=None, accept=[\".geojson\"], multiple=False),\n\n\n\t\t\tui.input_select(id=\"KeyColumn\", label=\"Key\", choices=[], multiple=False),\n\t\t\tui.input_select(id=\"ValueColumn\", label=\"Value\", choices=[], multiple=False),\n\n\n\t\t\tui.br(),\n\n\t\t\t# All the features related to map customization are here.\n\t\t\tui.HTML(\"Map Customization\"),\n\n\t\t\t# Only OpenStreatMap and CartoDB Positron seem to work.\n\t\t\tui.input_radio_buttons(id=\"MapType\", label=\"Map Type\", choices=[\"OpenStreetMap\", \"CartoDB Positron\"], selected=\"CartoDB Positron\"),\n\n\t\t\tui.input_slider(id=\"Opacity\", label=\"Heatmap Opacity\", value=0.5, min=0.0, max=1.0, step=0.1),\n\n\t\t\tui.br(),\n\n\t\t\t# Add the download buttons.\n\t\t\tui.layout_columns(\n\t\t\t\tui.download_button(\"DownloadHeatmap\", \"Download Heatmap\"),\n\t\t\t\tui.download_button(\"DownloadTable\", \"Download Table\")\n\t\t\t),\n\n\t\t\tid=\"SidebarPanel\",\n\t\t\twidth=350\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\n\t\t\t\t# The map\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_ui(\"Map\")),\n\n\t\t\t\t# The table\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"),),\n\t\t),\n\t)\n)\t\n\napp = App(app_ui, server)", "type": "text"}, {"name": "examples.py", "content": "examples = {\n\t\"Example 1\": {\n\n\t\"info\":\t\"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n    </head>  \n    <body>\n        This example file is from the <a href=\"http://open.canada.ca/en\">Open Data Portal</a>. \n\t\tThe data is from a <a href=\"http://open.canada.ca/data/en/dataset/23f028e8-424e-4c73-ace4-4e3614e0e3aa\">\n\t\tcarbon monoxide emissions study conducted by Environment Canada</a>. \n\t\tThe three columns represent results from 1990, 2000, and 2013.\n    </body>\n</html>\t\n\"\"\"\t,\n\n\t\"data\": \"\"\"\nProvince or territory\t1990 (emissions in kilotonnes)\t2000 (emissions in kilotonnes)\t2013 (emissions in kilotonnes)\nNewfoundland and Labrador\t1520.3\t844.2\t261.6\nPrince Edward Island\t152.3\t83.4\t34.8\nNova Scotia\t315.2\t218.5\t179.9\nNew Brunswick\t329.3\t216.6\t147.4\nQuebec\t2968\t2254.2\t1713.8\nOntario\t3985\t2707.8\t1500.4\nManitoba\t920.9\t532.5\t228.8\nSaskatchewan\t1138.7\t686.5\t291.9\nAlberta\t2416.6\t1662.3\t1191.3\nBritish Columbia\t2475.1\t1276.8\t692.2\nYukon\t90\t43.3\t12.4\nNorthwest Territories and Nunavut\t500.4\t245.8\t46.7\n\"\"\"\n\t},\n\n\t\"Example 2\": {\n\n\t\"info\":\t\"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n    </head>  \n    <body>\n        This example file is from <a href=\"http://www.statcan.gc.ca\">Statistics Canada</a>. \n\t\tThe data is adapted from <a href=\"http://www5.statcan.gc.ca/cansim/pick-choisir?lang=eng&id=01030553&p2=33\">\n\t\tNew cases and age-standardized rate for primary cancer (based on the February 2014 CCR tabulation file), by cancer type and sex, Canada, provinces and territories</a>. \n\t\tThe columns represent new cancer cases (age-standardized rate per 100,000 population) from 2006 to 2010.\n    </body>\n</html>\t\n\"\"\"\t,\n\n\t\"data\": \"\"\"\nProvince or territory\t2006\t2007\t2008\t2009\t2010\nNewfoundland and Labrador\t382.4\t394.3\t398.5\t408.8\t407.5\nPrince Edward Island\t429.2\t470.6\t432.8\t420.5\t404.4\nNova Scotia\t471.4\t455.7\t430.6\t415.8\t423.3\nNew Brunswick\t446.8\t445.8\t444.4\t429\t406\nQuebec\t416.2\t416.6\t422.3\t420.1\t407.4\nOntario\t406.7\t409.5\t391.6\t394.9\t394.4\nManitoba\t396.3\t406.8\t407\t412.2\t399.6\nSaskatchewan\t388.4\t405.2\t400.8\t394.6\t372.6\nAlberta\t398.7\t394.4\t393.9\t390.1\t373.6\nBritish Columbia\t371\t385.8\t373.7\t378.7\t354.6\nYukon\t311.2\t365\t286.5\t369.3\t319.8\nNorthwest Territories\t350\t468.4\t377.8\t436.9\t356.9\nNunavut\t537.2\t420.4\t346.9\t403\t334.9\n\"\"\"\n\t},\n\n\t\"Example 3\": {\n\n\t\"info\":\t\"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n    </head>  \n    <body>\n        This example file is from the <a href=\"http://www.cdc.gov\">U.S. Centers for Disease Control and Prevention</a>. \n\t\tThe data is from <a href=\"http://gis.cdc.gov/grasp/diabetes/DiabetesAtlas.html\">\n\t\tDiagnosed Diabetes, Age Adjusted Rate (per 100), Adults - Total, 2013</a>. \n    </body>\n</html>\t\n\"\"\"\t,\n\n\t\"data\": \"\"\"\nState\tRate (per 100)\nAlabama\t12.7\nAlaska\t7.3\nArizona\t9.8\nArkansas\t10.5\nCalifornia\t9.9\nColorado\t6.3\nConnecticut\t7.4\nDelaware\t9.9\nDistrict of Columbia\t8.4\nFlorida\t9.4\nGeorgia\t10.4\nGuam\t14.8\nHawaii\t7.5\nIdaho\t7.8\nIllinois\t9.2\nIndiana\t10\nIowa\t8.3\nKansas\t8.8\nKentucky\t9.7\nLouisiana\t10.8\nMaine\t8.1\nMaryland\t9.2\nMassachusetts\t7.7\nMichigan\t9.3\nMinnesota\t6.8\nMississippi\t12\nMissouri\t8.7\nMontana\t6.7\nNebraska\t8.4\nNevada\t9\nNew Hampshire\t8.1\nNew Jersey\t8.2\nNew Mexico\t9.8\nNew York\t9.7\nNorth Carolina\t10.5\nNorth Dakota\t8.1\nOhio\t9.2\nOklahoma\t10.2\nOregon\t8.3\nPennsylvania\t8.7\nPuerto Rico\t13.7\nRhode Island\t8.3\nSouth Carolina\t11.3\nSouth Dakota\t8.2\nTennessee\t11.1\nTexas\t10.9\nUtah\t7.7\nVermont\t6.7\nVirginia\t9.2\nWashington\t8\nWest Virginia\t11.2\nWisconsin\t7.3\nWyoming\t8\n\"\"\"\n\t},\n}", "type": "text"}, {"name": "requirements.txt", "content": "folium", "type": "text"}]