[{"name": "app.py", "content": "#\n# Heatmapper\n# Expression\n#\n# This file contains the ShinyLive application for Expression Heatmapper.\n# It can be run with the following command within this directory:\n#\t\tshinylive export . [site]\n# Where [site] is the destination of the site folder.\n#\n# If you would rather deploy the application as a PyShiny application,\n# run the following command within this directory:\n#\t\tshiny run\n#\n# Last Modified: 2024/02/09\n#\n\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nfrom matplotlib.pyplot import figure, subplots, colorbar\nfrom matplotlib.colors import Normalize\nfrom scipy.cluster import hierarchy\nfrom io import BytesIO\nfrom sys import modules\nfrom pathlib import Path\nfrom pandas import DataFrame, read_csv, read_excel, read_table\n\n\n# Interoperability between ShinyLive and PyShiny\nif \"pyodide\" in modules:\n\tfrom pyodide.http import pyfetch\n\tSource = \"https://raw.githubusercontent.com/kkernick/kkernick.github.io/main/expression/example_input/\"\n\tasync def download(url): r = await pyfetch(url); return await r.bytes() if r.ok else None\nelse:\n\tfrom os.path import exists\n\tSource = \"../example_input/\"\n\tasync def download(url): return open(url, \"rb\").read() if exists(url) else None\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n\t# Cache for examples. We can't assume users will have unique file names, so we cannot use the cache for\n\t# Uploaded files. Regardless, this prevents the application from fetching the example every time its needed.\n\tCache = {}\n\n\t# Information about the Examples\n\tInfo = {\n\t\t\"example1.txt\": \"This example dataset is sample input retrieved from the website for the Ashley Lab Heatmap Builder.\",\n\t\t\"example2.txt\": \"This example dataset is sample input retrieved from an online tutorial by Yan Cui (ycui2@uthsc.edu).\",\n\t\t\"example3.txt\": \"This example dataset is retrieved from the online supplement to Eisen et al. (1998), which is a very well known paper about cluster analysis and visualization. The details of how the data was collected are outlined in the paper.\"\n\t}\n\n\n\tasync def LoadData():\n\t\t\"\"\"\n\t\t@brief Returns a table containing the pairwise matrix.\n\t\t@returns\tA DataFrame containing the data requested, formatted as a pairwise matrix, or\n\t\t\t\t\t\t\tan empty DataFrame if we're on Upload, but the user has not supplied a file.\n\t\t\"\"\"\n\n\t\t# Grab an uploaded file, if its done, or grab an example (Using a cache to prevent redownload)\n\t\tif input.SourceFile() == \"Upload\":\n\t\t\tfile: list[FileInfo] | None = input.File()\n\t\t\tif file is None:\n\t\t\t\t\treturn DataFrame()\n\t\t\tn = file[0][\"name\"]\n\t\t\tf = file[0][\"datapath\"]\n\t\telse:\n\t\t\tn = input.Example()\n\t\t\tf = Cache[n] if n in Cache else BytesIO(await download(Source + input.Example()))\n\n\t\tmatch Path(n).suffix:\n\t\t\tcase \".csv\": return read_csv(f)\n\t\t\tcase \".xlsx\": return read_excel(f)\n\t\t\tcase _: return read_table(f)\n\n\n\tasync def HandleData():\n\t\tdf = await LoadData()\n\n\t\tindex_col = \"NAME\" if \"NAME\" in df.columns else \"UNIQID\"\n\t\tindex_labels = df[index_col]\n\n\t\t# Drop the naming columns before linkage.\n\t\tdata = df.drop(columns=[col for col in [\"UNIQID\", \"NAME\"] if col in df.columns])\n\t\tx_labels = ['X' + name if list(data.columns).count(name) == 1 else 'X' + name + f'.{i+1}' for i, name in enumerate(data.columns)]\n\n\t\treturn list(index_labels), x_labels, data\n\n\n\tdef GenerateDendrogram(data, ax, orientation, labels = [], invert=False):\n\t\tmatrix = hierarchy.linkage(data.values.T if invert else data.values, method=input.ClusterMethod().lower(), metric=input.DistanceMethod().lower())\n\t\tdendrogram = hierarchy.dendrogram(matrix, ax=ax, orientation=orientation.lower())\n\n\t\tif labels:\n\t\t\tlabels = [labels[i] for i in dendrogram['leaves']]\n\n\t\tmatch orientation:\n\t\t\tcase \"Left\" | \"Right\":\n\t\t\t\tax.set_xticks([])\n\t\t\t\tax.set_yticklabels(labels, fontsize=input.TextSize())\n\t\t\tcase \"Top\" | \"Bottom\":\n\t\t\t\tax.set_yticks([])\n\t\t\t\tax.set_xticklabels(labels, fontsize=input.TextSize())\n\n\t\treturn dendrogram\n\n\n\tasync def GenerateHeatmap():\n\t\t\"\"\"\n\t\t@brief Generates the Heatmap\n\t\t@returns The heatmap\n\t\t\"\"\"\n\n\t\tindex_labels, x_labels, data = await HandleData()\n\n\t\t# Create a figure with a heatmap and associated dendrograms\n\t\tfig = figure(figsize=(12, 10))\n\t\tgs = fig.add_gridspec(4, 2, height_ratios=[2, 8, 1, 1], width_ratios=[2, 8], hspace=0, wspace=0)\n\n\t\t# If we render the row dendragram, we change the order of the index labels to match the dendragram.\n\t\t# However, if we aren't rendering it, and thus row_dendragram isn't defined, we simply assign df\n\t\t# To data, so the order changes when turning the toggle.\n\t\tif \"row\" in input.Features():\n\t\t\tax_row = fig.add_subplot(gs[1, 0])\n\t\t\trow_dendrogram = GenerateDendrogram(data, ax_row, \"Left\")\n\t\t\tax_row.axis(\"off\")\n\t\t\tindex_labels = [index_labels[i] for i in row_dendrogram['leaves']]\n\t\t\tdf = data.iloc[row_dendrogram['leaves']]\n\t\telse:\n\t\t\tdf = data\n\n\t\t# If we render the column dendragram.\n\t\tif \"col\" in input.Features():\n\t\t\tax_col = fig.add_subplot(gs[0, 1])\n\t\t\tcol_dendrogram = GenerateDendrogram(data, ax_col, \"Top\", invert=True)\n\t\t\tax_col.axis(\"off\")\n\n\t\t# Handle normalization\n\t\tmatch input.ScaleType():\n\t\t\tcase \"Row\": df = df.div(df.max(axis=1), axis=0)\n\t\t\tcase \"Column\": df = df.div(df.max(axis=0), axis=1)\n\n\t\t# Render the heatmap.\n\t\tax_heatmap = fig.add_subplot(gs[1, 1])\n\t\theatmap = ax_heatmap.imshow(\n\t\t\tdf,\n\t\t\tcmap=input.ColorMap().lower(),\n\t\t\tinterpolation=input.Interpolation().lower(),\n\t\t\taspect=\"auto\",\n\t\t)\n\n\t\t# If we render the Y axis.\n\t\tif \"y\" in input.Features():\n\t\t\tax_heatmap.set_yticks(range(len(index_labels)))\n\t\t\tax_heatmap.set_yticklabels(index_labels, fontsize=input.TextSize())\n\t\t\tax_heatmap.yaxis.tick_right()\n\t\telse:\n\t\t\tax_heatmap.set_yticklabels([])\n\n\t\t# If we render the X axis.\n\t\tif \"x\" in input.Features():\n\t\t\tax_heatmap.set_xticks(range(len(x_labels)))\n\t\t\tax_heatmap.set_xticklabels(x_labels, rotation=90, fontsize=input.TextSize())\n\t\telse:\n\t\t\tax_heatmap.set_xticklabels([])\n\n\t\t# If we render the legend.\n\t\tif \"legend\" in input.Features():\n\t\t\tax_cbar = fig.add_subplot(gs[3, 1])\n\t\t\tcbar = fig.colorbar(heatmap, cax=ax_cbar, orientation='horizontal')\n\n\t\treturn fig\n\n\n\t@output\n\t@render.table\n\tasync def LoadedTable(): return await LoadData()\n\n\t@output\n\t@render.plot\n\tasync def Heatmap(): return await GenerateHeatmap()\n\n\n\t@output\n\t@render.plot\n\tasync def RowDendrogram():\n\t\tindex_labels, _, data = await HandleData()\n\n\t\tfig = figure(figsize=(12, 10))\n\t\tax = fig.add_subplot(111)\n\n\t\tax.spines['top'].set_visible(False)\n\t\tax.spines['right'].set_visible(False)\n\t\tax.spines['bottom'].set_visible(False)\n\t\tax.spines['left'].set_visible(False)\n\n\t\tGenerateDendrogram(data, ax, input.Orientation(), index_labels)\n\t\treturn fig\n\n\n\t@output\n\t@render.plot\n\tasync def ColumnDendrogram():\n\t\t_, x_labels, data = await HandleData()\n\n\t\tfig = figure(figsize=(12, 10))\n\t\tax = fig.add_subplot(111)\n\n\t\tax.spines['top'].set_visible(False)\n\t\tax.spines['right'].set_visible(False)\n\t\tax.spines['bottom'].set_visible(False)\n\t\tax.spines['left'].set_visible(False)\n\n\t\tGenerateDendrogram(data, ax, input.Orientation(), x_labels, invert=True)\n\t\treturn fig\n\n\n\t@output\n\t@render.text\n\tdef ExampleInfo(): return Info[input.Example()]\n\n\n\t@session.download(filename=\"table.csv\")\n\tasync def DownloadTable(): df = await LoadData(); yield df.to_string()\n\n\napp_ui = ui.page_fluid(\n\n\t# Welcome back, NavBar :)\n\tui.panel_title(title=None, window_title=\"Heatmapper\"),\n\tui.navset_bar(\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/expression/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Expression</a>'), value=\"Expression\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/pairwise/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Pairwise</a>'), value=\"Pairwise\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/image/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Image</a>'), value=\"Image\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geomap/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geomap</a>'), value=\"Geomap\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/geocoordinate/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">Geocoordinate</a>'), value=\"Geocoordinate\"),\n\t\tui.nav_panel(ui.HTML('<a href=https://kkernick.github.io/about/site/index.html target=\"_blank\" rel=\"noopener noreferrer\">About</a>'), value=\"About\"),\n\t\ttitle=\"Heatmapper\",\n\t\tselected=\"Pairwise\",\n\t),\n\n\tui.layout_sidebar(\n\t\tui.sidebar(\n\n\t\t\t# If the user needs help with the formatting.\n\t\t\tui.HTML(\"<a href=https://kkernick.github.io/about/site/index.html>Data Format</a>\"),\n\n\t\t\t# Specify whether to use example files, or upload one.\n\t\t\tui.input_radio_buttons(id=\"SourceFile\", label=\"Specify a Source File\", choices=[\"Example\", \"Upload\"], selected=\"Example\", inline=True),\n\n\t\t\t# Only display an input dialog if the user is one Upload\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Upload'\",\n\t\t\t\tui.input_file(\"File\", \"Choose a File\", accept=[\".csv\", \".txt\", \"xlsx\", \".pdb\", \".dat\"], multiple=False),\n\t\t\t),\n\n\t\t\t# Otherwise, add the example selection and an info button.\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.SourceFile === 'Example'\",\n\t\t\t\t\"Choose an Example File\",\n\t\t\t\tui.layout_columns(\n\t\t\t\t\tui.input_select(id=\"Example\", label=None, choices={\n\t\t\t\t\t\t\t\t\t\t\t\"example1.txt\": \"Example 1\",\n\t\t\t\t\t\t\t\t\t\t\t\"example2.txt\": \"Example 2\",\n\t\t\t\t\t\t\t\t\t\t\t\"example3.txt\": \"Example 3\",\n\t\t\t\t\t}),\n\t\t\t\t\tui.popover(ui.input_action_link(id=\"ExampleInfoButton\", label=\"Info\"), ui.output_text(\"ExampleInfo\")),\n\t\t\t\t\tcol_widths=[10,2],\n\t\t\t\t)\n\t\t\t),\n\n\t\t\t# https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html\n\t\t\tui.input_select(id=\"ClusterMethod\", label=\"Clustering Method\", choices=[\"Single\", \"Complete\", \"Average\", \"Weighted\", \"Centroid\", \"Median\", \"Ward\"], selected=\"Average\"),\n\n\t\t\t# https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html#scipy.spatial.distance.pdist\n\t\t\tui.input_select(id=\"DistanceMethod\", label=\"Distance Method\", choices=[\"Braycurtis\", \"Canberra\", \"Chebyshev\", \"Cityblock\", \"Correlation\", \"Cosine\", \"Dice\", \"Euclidean\", \"Hamming\", \"Jaccard\", \"Jensenshannon\", \"Kulczynski1\", \"Mahalanobis\", \"Matching\", \"Minkowski\", \"Rogerstanimoto\", \"Russellrao\", \"Seuclidean\", \"Sokalmichener\", \"Sokalsneath\", \"Sqeuclidean\", \"Yule\"], selected=\"Euclidean\"),\n\n\t\t\tui.input_numeric(id=\"TextSize\", label=\"Text Size\", value=8, min=1, max=50, step=1),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.MainTab === 'Interactive'\",\n\t\t\t\tui.br(),\n\n\t\t\t\t# Define how the colors are scaled.\n\t\t\t\tui.input_select(id=\"ScaleType\", label=\"Scale Type\", choices=[\"Row\", \"Column\", \"None\"], selected=\"None\"),\n\n\t\t\t\t# https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html\n\t\t\t\tui.input_select(id=\"Interpolation\", label=\"Interpolation\", choices=[\"None\", \"Antialiased\", \"Nearest\", \"Bilinear\", \"Bicubic\", \"Spline16\", \"Spline36\", \"Hanning\", \"Hamming\", \"Hermite\", \"Kaiser\", \"Quadric\", \"Catrom\", \"Gaussian\", \"Bessel\", \"Mitchell\", \"Sinc\", \"Lanczos\", \"Blackman\"], selected=\"Nearest\"),\n\n\t\t\t\t# Set the ColorMap used.\n\t\t\t\tui.input_select(id=\"ColorMap\", label=\"Color Map\", choices=[\"Viridis\", \"Plasma\", \"Inferno\", \"Magma\", \"Cividis\"], selected=\"Viridis\"),\n\n\t\t\t\t# Toggle rendering features. All are on by default.\n\t\t\t\tui.input_checkbox_group(id=\"Features\", label=\"Heatmap Features\",\n\t\t\t\t\tchoices={\"row\": \"Row Dendrogram\", \"col\": \"Column Dendrogram\", \"x\": \"X Labels\", \"y\": \"Y Labels\", \"legend\": \"Legend\"},\n\t\t\t\t\tselected=[\"row\", \"col\", \"x\", \"y\", \"legend\"])\n\t\t\t),\n\n\t\t\tui.panel_conditional(\n\t\t\t\t\"input.MainTab === 'Row' || input.MainTab === 'Column'\",\n\t\t\t\tui.br(),\n\n\t\t\t\t# Define the Orientation of the Dendrogram in the Tab\n\t\t\t\tui.input_select(id=\"Orientation\", label=\"Dendrogram Orientation\", choices=[\"Top\", \"Bottom\", \"Left\", \"Right\"], selected=\"Left\"),\n\t\t\t),\n\n\n\t\t\t# Add the download buttons. You can download the heatmap by right clicking it :)\n\t\t\tui.download_button(\"DownloadTable\", \"Download Table\"),\n\n\t\t\tid=\"SidebarPanel\",\n\t\t\t#width=350,\n\t\t),\n\n\t\t# Add the main interface tabs.\n\t\tui.navset_tab(\n\t\t\t\tui.nav_panel(\"Interactive\", ui.output_plot(\"Heatmap\", height=\"90vh\"), value=\"Interactive\"),\n\t\t\t\tui.nav_panel(\"Row Dendrogram\", ui.output_plot(\"RowDendrogram\", height=\"90vh\"), value=\"Row\"),\n\t\t\t\tui.nav_panel(\"Column Dendrogram\", ui.output_plot(\"ColumnDendrogram\", height=\"90vh\"), value=\"Column\"),\n\t\t\t\tui.nav_panel(\"Table\", ui.output_table(\"LoadedTable\"), value=\"Table\"),\n\n\t\t\t\tid=\"MainTab\"\n\t\t),\n\t)\n)\n\napp = App(app_ui, server)", "type": "text"}]